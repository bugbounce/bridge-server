// Code generated by go-bindata.
// sources:
// migrations_gateway/01_init.sql
// migrations_gateway/02_payment_id.sql
// migrations_gateway/03_transaction_id.sql
// migrations_compliance/01_init.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations_gateway01_initSql = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x7c, 0x92,
	0x41, 0x4f, 0xc3, 0x30, 0x0c, 0x85, 0xef, 0xf9, 0x15, 0x3e, 0x6e, 0x82,
	0x49, 0x80, 0xd8, 0x2e, 0x3b, 0x15, 0x16, 0xa4, 0x89, 0xb2, 0x8d, 0xd2,
	0x1e, 0x76, 0xaa, 0xb2, 0xc4, 0x2a, 0x11, 0x6d, 0x52, 0x25, 0xee, 0x18,
	0xff, 0x9e, 0x0c, 0x09, 0xd6, 0x86, 0xc1, 0x31, 0xfa, 0x5e, 0x6c, 0x3f,
	0x3f, 0x4f, 0x26, 0x70, 0xd1, 0xe8, 0xca, 0x09, 0x42, 0x28, 0x5a, 0x76,
	0x9f, 0xf1, 0x24, 0xe7, 0x90, 0x27, 0x77, 0x29, 0x87, 0x0c, 0x25, 0xea,
	0x3d, 0xaa, 0x8d, 0xf8, 0x68, 0xd0, 0x10, 0x8c, 0x18, 0x80, 0x56, 0xb0,
	0xd3, 0x95, 0x47, 0xa7, 0x45, 0x7d, 0x19, 0xde, 0xb6, 0xc5, 0xf0, 0x57,
	0x5b, 0x53, 0x06, 0xb2, 0x17, 0x4e, 0xbe, 0x0a, 0x37, 0xba, 0x99, 0x4e,
	0xc7, 0x50, 0xac, 0x96, 0xcf, 0x05, 0x87, 0xd5, 0x3a, 0x87, 0x55, 0x91,
	0xa6, 0x47, 0x71, 0xeb, 0xac, 0x44, 0xef, 0x51, 0x95, 0x82, 0x80, 0x74,
	0x83, 0x9e, 0x44, 0xd3, 0x0e, 0x25, 0xa2, 0xd2, 0xa6, 0x2a, 0xc9, 0xbe,
	0xa1, 0x19, 0xd6, 0xeb, 0xab, 0xc2, 0x3f, 0xea, 0xfc, 0xdf, 0x7c, 0x93,
	0x2d, 0x9f, 0x92, 0x6c, 0x0b, 0x8f, 0x7c, 0x0b, 0x23, 0xad, 0xc6, 0x6c,
	0x3c, 0x67, 0x43, 0x6f, 0x2f, 0xc1, 0x50, 0xee, 0x84, 0xf1, 0x42, 0x1e,
	0xa7, 0xff, 0xf6, 0x76, 0x32, 0x46, 0x27, 0xd8, 0xb7, 0x36, 0xbb, 0xed,
	0x75, 0x82, 0xdf, 0xa3, 0x5c, 0x5f, 0x45, 0x93, 0xda, 0xce, 0x49, 0xfc,
	0xc1, 0xd3, 0x59, 0x84, 0xbb, 0x5d, 0xa3, 0x89, 0xfe, 0xdb, 0x88, 0xef,
	0xa4, 0x44, 0x54, 0xb1, 0x64, 0xc1, 0x1f, 0x92, 0x22, 0x3d, 0xc9, 0x6a,
	0x54, 0x15, 0xba, 0x63, 0x38, 0x3a, 0x44, 0x15, 0x53, 0x34, 0x7b, 0xac,
	0x43, 0x56, 0xe5, 0x41, 0x39, 0x20, 0x3c, 0xd0, 0xa0, 0x85, 0x43, 0xdf,
	0xd5, 0xf4, 0xc5, 0x06, 0x2b, 0x8d, 0xab, 0x9c, 0x5d, 0x6b, 0xff, 0x82,
	0x16, 0xf6, 0xdd, 0xb0, 0x45, 0xb6, 0xde, 0x9c, 0xbf, 0xa0, 0x79, 0x9f,
	0x45, 0x09, 0xcc, 0xd9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x61,
	0x55, 0x6b, 0x8b, 0x02, 0x00, 0x00,
}

func migrations_gateway01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway01_initSql,
		"migrations_gateway/01_init.sql",
	)
}

func migrations_gateway01_initSql() (*asset, error) {
	bytes, err := migrations_gateway01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/01_init.sql", size: 651, mode: os.FileMode(420), modTime: time.Unix(1476130062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_gateway02_payment_idSql = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xd2, 0xd5,
	0x55, 0xd0, 0xce, 0xcd, 0x4c, 0x2f, 0x4a, 0x2c, 0x49, 0x55, 0x08, 0x2d,
	0xe0, 0x72, 0xf4, 0x09, 0x71, 0x0d, 0x52, 0x08, 0x71, 0x74, 0xf2, 0x71,
	0x55, 0x08, 0x4e, 0xcd, 0x2b, 0x09, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4c,
	0x2e, 0xc9, 0xcc, 0xcf, 0x53, 0x70, 0x74, 0x71, 0x51, 0x28, 0x48, 0xac,
	0xcc, 0x05, 0x0a, 0xc7, 0x67, 0xa6, 0x28, 0x84, 0x39, 0x06, 0x39, 0x7b,
	0x38, 0x06, 0x69, 0x18, 0x99, 0x9a, 0x6a, 0x2a, 0xf8, 0x85, 0xfa, 0xf8,
	0x28, 0xb8, 0xb8, 0xba, 0x39, 0x86, 0xfa, 0x84, 0x80, 0x39, 0xd6, 0x04,
	0x8d, 0x72, 0xf6, 0xf7, 0x0b, 0x0e, 0x09, 0x72, 0xf4, 0xf4, 0x0b, 0x41,
	0x32, 0x35, 0xbe, 0x34, 0x2f, 0xb3, 0xb0, 0x14, 0xe8, 0x14, 0x3f, 0xcf,
	0xc0, 0x50, 0x57, 0x05, 0x0d, 0x84, 0x8c, 0xa6, 0x35, 0x17, 0x17, 0xb2,
	0x63, 0x5d, 0xf2, 0xcb, 0xf3, 0xf0, 0xda, 0xe1, 0x12, 0xe4, 0x1f, 0x80,
	0x64, 0xb2, 0x35, 0x17, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xf6, 0xe1,
	0x10, 0xeb, 0x00, 0x00, 0x00,
}

func migrations_gateway02_payment_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway02_payment_idSql,
		"migrations_gateway/02_payment_id.sql",
	)
}

func migrations_gateway02_payment_idSql() (*asset, error) {
	bytes, err := migrations_gateway02_payment_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/02_payment_id.sql", size: 235, mode: os.FileMode(420), modTime: time.Unix(1516147186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_gateway03_transaction_idSql = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xd2, 0xd5,
	0x55, 0xd0, 0xce, 0xcd, 0x4c, 0x2f, 0x4a, 0x2c, 0x49, 0x55, 0x08, 0x2d,
	0xe0, 0x72, 0xf4, 0x09, 0x71, 0x0d, 0x52, 0x08, 0x71, 0x74, 0xf2, 0x71,
	0x55, 0x08, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b, 0x4d, 0x09, 0x48, 0xac,
	0xcc, 0x4d, 0xcd, 0x2b, 0x51, 0x70, 0x74, 0x71, 0x51, 0x28, 0x29, 0x4a,
	0xcc, 0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x8b, 0xcf, 0x4c, 0x51,
	0x08, 0x73, 0x0c, 0x72, 0xf6, 0x70, 0x0c, 0xd2, 0x30, 0x33, 0xd1, 0x54,
	0x70, 0x71, 0x75, 0x73, 0x0c, 0xf5, 0x09, 0x51, 0x50, 0xf7, 0xd3, 0x77,
	0x54, 0xb7, 0x26, 0x68, 0x52, 0x6e, 0x6a, 0x6e, 0x3e, 0x85, 0x46, 0x20,
	0x3b, 0xa6, 0x2c, 0x31, 0xa7, 0x34, 0x15, 0x9f, 0x61, 0x5c, 0xc8, 0x3e,
	0x75, 0xc9, 0x2f, 0xcf, 0xc3, 0x6b, 0xbc, 0x4b, 0x90, 0x7f, 0x00, 0x9a,
	0x67, 0xad, 0xb9, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0xba, 0x27,
	0xa4, 0x2c, 0x01, 0x00, 0x00,
}

func migrations_gateway03_transaction_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway03_transaction_idSql,
		"migrations_gateway/03_transaction_id.sql",
	)
}

func migrations_gateway03_transaction_idSql() (*asset, error) {
	bytes, err := migrations_gateway03_transaction_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/03_transaction_id.sql", size: 156, mode: os.FileMode(420), modTime: time.Unix(1516147543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_compliance01_initSql = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x94, 0x93,
	0xc1, 0x6e, 0xf2, 0x30, 0x10, 0x84, 0xef, 0x7e, 0x8a, 0x3d, 0x12, 0xfd,
	0x70, 0xf9, 0x55, 0xb8, 0x70, 0x4a, 0x8b, 0x2b, 0x45, 0xa5, 0x81, 0x46,
	0x89, 0x54, 0x4e, 0xd6, 0x82, 0x5d, 0xb0, 0x1a, 0xc7, 0xc8, 0x38, 0x05,
	0xfa, 0xf4, 0x75, 0x4a, 0x21, 0x71, 0x21, 0xa0, 0x4a, 0xb9, 0xc4, 0x3b,
	0xbb, 0x3b, 0xf3, 0x25, 0xee, 0xf5, 0xe0, 0x9f, 0x92, 0x4b, 0x83, 0x56,
	0x40, 0xb6, 0x26, 0x0f, 0x09, 0x0d, 0x53, 0x0a, 0x69, 0x78, 0x3f, 0xa6,
	0x10, 0x96, 0x76, 0xa5, 0x8d, 0xfc, 0x14, 0x3c, 0x35, 0x58, 0x6c, 0x70,
	0x61, 0xa5, 0x2e, 0xa0, 0x43, 0x00, 0x24, 0x87, 0xb9, 0x5c, 0x6e, 0x84,
	0x91, 0x98, 0x77, 0xdd, 0xbb, 0xad, 0xeb, 0xcc, 0xd5, 0x3e, 0xd0, 0x2c,
	0x56, 0x68, 0x3a, 0x83, 0xbb, 0x00, 0xe2, 0x49, 0x0a, 0x71, 0x36, 0x1e,
	0x57, 0x32, 0x25, 0x94, 0x6e, 0x2d, 0x36, 0x67, 0xec, 0xb8, 0x01, 0x2b,
	0x76, 0xd6, 0x13, 0xe0, 0xc9, 0x0e, 0x43, 0x0b, 0x56, 0x2a, 0xb1, 0xb1,
	0xa8, 0xd6, 0x9e, 0x86, 0xa3, 0xc5, 0xf3, 0x4e, 0xf7, 0x4c, 0x93, 0xe8,
	0x39, 0x4c, 0x66, 0xf0, 0x44, 0x67, 0xd0, 0x91, 0x3c, 0x20, 0xc1, 0x90,
	0xfc, 0x4a, 0x9b, 0xe7, 0x7a, 0x2b, 0xf8, 0x63, 0x74, 0x31, 0x61, 0x81,
	0x4a, 0x9c, 0xac, 0xff, 0xef, 0xf7, 0x7d, 0xef, 0x5c, 0x2b, 0x94, 0x45,
	0x7b, 0x7d, 0x5d, 0xce, 0x73, 0xb9, 0x60, 0xef, 0x62, 0x0f, 0xdf, 0x82,
	0xfe, 0xc0, 0xaf, 0xe3, 0x61, 0x77, 0x7b, 0xae, 0x33, 0xfb, 0x24, 0x80,
	0x3a, 0x40, 0x16, 0x47, 0x2f, 0x19, 0x85, 0x28, 0x1e, 0xd1, 0x57, 0xc0,
	0x37, 0xc9, 0xe6, 0x7b, 0xf6, 0x63, 0x69, 0x12, 0x37, 0x83, 0x1d, 0x0e,
	0x5d, 0xf4, 0x2b, 0x8d, 0x0d, 0xaf, 0x7e, 0x73, 0x5d, 0x68, 0x63, 0x97,
	0x39, 0x5e, 0x17, 0xe9, 0xb9, 0xc9, 0xd7, 0x01, 0x3a, 0xc1, 0x2d, 0x86,
	0x4e, 0x72, 0x0b, 0x63, 0xe9, 0x36, 0x36, 0xff, 0xbf, 0xb3, 0x19, 0x7f,
	0xe7, 0x1c, 0xb4, 0x51, 0x2e, 0x2b, 0x56, 0x9e, 0x27, 0x76, 0x5c, 0x5f,
	0x63, 0x3b, 0x00, 0xf1, 0x54, 0xdd, 0xa3, 0xcb, 0x6a, 0x32, 0x69, 0x5e,
	0xbf, 0x91, 0xde, 0x16, 0x64, 0x94, 0x4c, 0xa6, 0xd7, 0xae, 0xdf, 0xd0,
	0x53, 0x1c, 0x3f, 0xce, 0xa5, 0xd3, 0x6a, 0xf7, 0x90, 0x7c, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x02, 0xc5, 0x23, 0x8a, 0xe0, 0x03, 0x00, 0x00,
}

func migrations_compliance01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_compliance01_initSql,
		"migrations_compliance/01_init.sql",
	)
}

func migrations_compliance01_initSql() (*asset, error) {
	bytes, err := migrations_compliance01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_compliance/01_init.sql", size: 992, mode: os.FileMode(420), modTime: time.Unix(1476985200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations_gateway/01_init.sql":           migrations_gateway01_initSql,
	"migrations_gateway/02_payment_id.sql":     migrations_gateway02_payment_idSql,
	"migrations_gateway/03_transaction_id.sql": migrations_gateway03_transaction_idSql,
	"migrations_compliance/01_init.sql":        migrations_compliance01_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations_compliance": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_compliance01_initSql, map[string]*bintree{}},
	}},
	"migrations_gateway": &bintree{nil, map[string]*bintree{
		"01_init.sql":           &bintree{migrations_gateway01_initSql, map[string]*bintree{}},
		"02_payment_id.sql":     &bintree{migrations_gateway02_payment_idSql, map[string]*bintree{}},
		"03_transaction_id.sql": &bintree{migrations_gateway03_transaction_idSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
